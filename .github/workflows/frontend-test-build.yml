name: build-frontend

on:
  push:
    branches: '*'
    tags: '*'

env:
  NODE_VERSION: 18.16.1
  FRONTEND_DIR: ./source/frontend
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_NAME: wegonice-frontend

jobs:
  prettier-check:
    runs-on: ubuntu-latest

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Check prettier for files in ./src
        run: |
          cd ${{env.FRONTEND_DIR}}
          npm run prettier:check

  build-frontend:
    runs-on: ubuntu-latest
    needs: prettier-check

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Build package
        run: |
          cd ${{env.FRONTEND_DIR}}
          npm ci
          npm run build

      - name: Upload result as binary
        uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        with:
          name: frontend-build
          path: ${{env.FRONTEND_DIR}}/dist

  publish-container:
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Get branch name
        run: echo "BRANCH_NAME=$(git symbolic-ref --short HEAD)" >> $GITHUB_ENV

      - name: Get tags for current branch
        run: |
          git fetch --tags
          TAGS=$(git tag --contains $BRANCH_NAME)
          echo "TAGS=$TAGS" >> $GITHUB_ENV

      - name: Display tags
        run: echo "Tags for current branch - $TAGS"

      - name: Set container tag
        run: |
          if [ -z "$TAGS" ]; then
            echo "TAG_NAME=latest" >> $GITHUB_ENV
          else
            echo "TAG_NAME=$TAGS" >> $GITHUB_ENV
          fi

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ${{env.FRONTEND_DIR}}/dist

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{env.CONTAINER_REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Push container to GitHub Container Registry
        run: |
          echo "Tagging with tag: $TAG_NAME"
          cd ${{env.FRONTEND_DIR}}
          docker buildx create --use --name multi-arch
          docker buildx build --tag ${{env.CONTAINER_REGISTRY}}/pfmartin/${{env.CONTAINER_NAME}}:$TAG_NAME --platform="linux/amd64,linux/arm64" . --push
